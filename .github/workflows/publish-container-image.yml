name: Publish Image to GHCR
on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - "**.txt"
  schedule:
    - cron: "0 0 * * 0"

env:
    IMAGE_NAME: llama-server

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    strategy:
      fail-fast: true
      matrix:
        model:
          - Llama-3.2-1B-Instruct
          - Llama-3.2-3B-Instruct
          - Llama3.2-3B-ShiningValiant2
          - Qwen2.5-0.5B-Instruct
          - Qwen2.5-1.5B-Instruct
          - Qwen2.5-3B-Instruct
          - Qwen2.5-Coder-0.5B-Instruct
          - Qwen2.5.1-Coder-1.5B-Instruct
          - Qwen2.5-Coder-3B-Instruct
          - Qwen2.5-Math-1.5B-Instruct
          - Replete-LLM-V2.5-Qwen-0.5b
          - Replete-LLM-V2.5-Qwen-1.5b
          - Replete-LLM-V2.5-Qwen-3b
          - granite-3.0-1b-a400m-instruct
          - granite-3.0-2b-instruct
          - granite-3.0-3b-a800m-instruct
          - SmolLM2-135M-Instruct
          - SmolLM2-360M-Instruct
          - SmolLM2-1.7B-Instruct
          - Phi-3.5-mini-instruct
          - Nemotron-Mini-4B-Instruct
          - AMD-OLMo-1B-SFT-DPO
          - Yi-Coder-1.5B-Chat

    steps:
      - name: Checkout Repository
        uses: actions/checkout@main

      - name: Convert model name to lowercase
        id: change_case
        uses: ASzc/change-string-case-action@main
        with:
          string: ${{ matrix.model }}

      - name: Install huggingface-cli
        uses: BSFishy/pip-actio@main
        with:
         packages: huggingface_hub[cli]
          
      - name: Download GGUF
        run: |
          huggingface-cli download bartowski/${{ matrix.model }}-GGUF --include "${{ matrix.model }}-Q4_0_8_8.gguf" --local-dir .

      - name: Build Image with Buildah
        id: build_image
        uses: redhat-actions/buildah-build@main
        with:
          containerfiles: ./Containerfile
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.change_case.outputs.lowercase }}
          build-args: MODEL=${{ matrix.model }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=${{ matrix.model }}-Q4_0_8_8.gguf
            org.opencontainers.image.source=https://huggingface.co/bartowski/${{ matrix.model }}-GGUF

      - name: Start server
        uses: mathiasvr/command-output@main
        id: container
        with:
          run: |
            podman run -d -p 8001:8080 localhost/${{ env.IMAGE_NAME }}:${{ steps.change_case.outputs.lowercase }}

      - name: Wait for server to load
        uses: juliangruber/sleep-action@main
        with:
          time: 5s

      - name: Get chat completion
        uses: mathiasvr/command-output@main
        id: api
        with:
          run: |
            curl -v \
            -H "Content-Type: application/json" \
            -d '{"messages":[{"role":"user","content":"who are you and what can you do?"}]}' \
            http://127.0.0.1:8001/v1/chat/completions

      - name: Format response
        uses: direct-actions/jq@main
        with:
          input: ${{ steps.api.outputs.stdout }}
          filter: '.choices[0].message.content'
          raw-output: true

      - name: Print server logs
        run: |
          podman logs ${{ steps.container.outputs.stdout }}

      - name: Push Image to GHCR
        uses: redhat-actions/push-to-registry@main
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

  remove_old:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: cleanup
        uses: dataaxiom/ghcr-cleanup-action@main
        with:
          keep-n-tagged: 1
          older-than: 1 hour
          delete-ghost-images: true
          delete-untagged: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tags
        uses: mathiasvr/command-output@main
        id: skopeo
        with:
          run: |
            skopeo list-tags docker://ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}

      - name: Format tags
        uses: direct-actions/jq@main
        with:
          input: ${{ steps.skopeo.outputs.stdout }}
          filter: '.Repository as $repo | .Tags[] | "\($repo):\(.)"'
          raw-output: true
